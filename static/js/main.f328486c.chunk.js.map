{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Date","Math","round","feels_like","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8KACMA,EACC,mCADDA,EAEE,0CAyHOC,MAtHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAkBPC,EAAc,SAACC,GACnB,IAuBIC,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,IAGpC,OACE,yBACEE,UACyB,oBAAhBZ,EAAQa,MACXb,EAAQa,KAAKC,KAAO,GAClB,WAEF,OAGN,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAEC,OAAOC,QACnCA,MAAOtB,EACPuB,WAhEK,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OACA7B,EADA,qBACqBG,EADrB,8CACgEH,IAElE8B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL3B,EAAW2B,GACX7B,EAAS,IACT8B,QAAQC,IAAIF,UA0DU,oBAAhB5B,EAAQa,KACd,yBAAKD,UAAU,IACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACZZ,EAAQ+B,KADX,IACkB/B,EAAQgC,IAAIC,SAE9B,yBAAKrB,UAAU,QAAQV,EAAY,IAAIgC,OACvC,yBAAKtB,UAAU,eACb,wBAAIA,UAAU,WAAd,oBACA,yBAAKA,UAAU,QACZZ,EAAQa,KAAKC,KADhB,QAEE,6BACCqB,KAAKC,MAA0B,EAApBpC,EAAQa,KAAKC,MAAY,EAAI,GAH3C,SAKA,wBAAIF,UAAU,WAAd,cACA,yBAAKA,UAAU,QACZuB,KAAKC,MAAMpC,EAAQa,KAAKwB,YAD3B,SAC0C,6BACA,EAAtCF,KAAKC,MAAMpC,EAAQa,KAAKwB,YAAmB,EAAI,GAFnD,SAIA,yBAAKzB,UAAU,WAAWZ,EAAQA,QAAQ,GAAGa,SAKnD,yBAAKD,UAAU,IACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,QAAQV,EAAY,IAAIgC,OACvC,yBAAKtB,UAAU,eACb,wBAAIA,UAAU,WAAd,oBACA,yBAAKA,UAAU,QAAf,SACK,6BADL,UAGA,wBAAIA,UAAU,WAAd,cACA,yBAAKA,UAAU,QAAf,SACK,6BADL,UAGA,yBAAKA,UAAU,kBCtGX0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.f328486c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api = {\n  key: \"4abaefe0881531ca505bb4c76c10bae2\",\n  base: \"http://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(\n        `${api.base}weather?q=${query}&units=metric&units=imperial&APPID=${api.key}`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"app warm\"\n            : \"app\"\n          : \"app\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div className=\"\">\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name},{weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n              <div className=\"weather-box\">\n                <h1 className=\"weather\">Real Temperature</h1>\n                <div className=\"temp\">\n                  {weather.main.temp}°C\n                  <br />\n                  {Math.round(weather.main.temp * 9) / 5 + 32}°F\n                </div>\n                <h1 className=\"weather\">Feels Like</h1>\n                <div className=\"temp\">\n                  {Math.round(weather.main.feels_like)}°C <br />\n                  {(Math.round(weather.main.feels_like) * 9) / 5 + 32}°F\n                </div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"\">\n            <div className=\"location-box\">\n              <div className=\"location\"></div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n              <div className=\"weather-box\">\n                <h1 className=\"weather\">Real Temperature</h1>\n                <div className=\"temp\">\n                  °C <br /> °F\n                </div>\n                <h1 className=\"weather\">Feels Like</h1>\n                <div className=\"temp\">\n                  °C <br /> °F\n                </div>\n                <div className=\"weather\"></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}